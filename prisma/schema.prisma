// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  email       String       @unique
  password    String
  createdAt   DateTime     @default(now()) @db.Timestamp(6)
  credentials Credential[]
  notes       Note[]
  cards       Card[]
  wifis       Wifi[]
  documents   Document[]

  @@map("users")
}

model Credential {
  id        String   @id @default(uuid())
  title     String
  url       String
  name      String
  password  String
  createdAt DateTime @default(now()) @db.Timestamp(6)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([title, userId])
  @@map("credentials")
}

model Note {
  id        String   @id @default(uuid())
  title     String   @db.VarChar(50)
  note      String   @db.VarChar(1000)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([title, userId])
  @@map("notes")
}

model Card {
  id             String    @id @default(uuid())
  title          String
  number         String
  name           String
  securityCode   String
  expirationDate String
  password       String
  isVirtual      Boolean
  type           CardTypes
  createdAt      DateTime  @default(now()) @db.Timestamp(6)
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String

  @@unique([title, userId])
  @@map("cards")
}

enum CardTypes {
  CREDIT
  DEBIT
  BOTH
}

model Wifi {
  id        String   @id @default(uuid())
  title     String
  name      String
  password  String
  createdAt DateTime @default(now()) @db.Timestamp(6)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@map("wifis")
}

model Document {
  id                 String        @id @default(uuid())
  name               String
  issueDate          String
  validity           String
  registrationNumber String        @unique @db.VarChar(12)
  issuingBody        String        @db.VarChar(2)
  type               DocumentTypes
  createdAt          DateTime      @default(now()) @db.Timestamp(6)
  user               User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String

  @@map("documents")
}

enum DocumentTypes {
  RG
  CNH
}
